-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Function] ;

Function.	 Function ::= Type Ident "(" [Argument] ")" Block ;

separator nonempty Function "" ;

Argument. 	   Argument ::= Type Ident;

separator  Argument "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Statement] "}" ;

separator  Statement "" ;

Empty.     Statement ::= ";" ;

InnerBlock.   Statement ::= Block ;

Decl.  Statement ::= Type [Declaration] ";" ;

NoInit.    Declaration ::= Ident ; 

Init.      Declaration ::= Ident "=" Expr ;

separator nonempty Declaration "," ;

Ass.       Statement ::= Ident "=" Expr  ";" ;

Incr.      Statement ::= Ident "++"  ";" ;

Decr.      Statement ::= Ident "--"  ";" ;

Return.       Statement ::= "return" Expr ";" ;

VoidReturn.      Statement ::= "return" ";" ;

If.      Statement ::= "if" "(" Expr ")" Statement  ;

IfElse.  Statement ::= "if" "(" Expr ")" Statement "else" Statement  ;

While.     Statement ::= "while" "(" Expr ")" Statement ;

SExp.      Statement ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

Var.      Expr6 ::= Ident ;

LitInt.   Expr6 ::= Integer ;

LitTrue.  Expr6 ::= "true" ;

LitFalse. Expr6 ::= "false" ;

App.      Expr6 ::= Ident "(" [Expr] ")" ;

String.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

Mul.      Expr4 ::= Expr4 MulOp Expr5 ;

Add.      Expr3 ::= Expr3 AddOp Expr4 ;

Rel.      Expr2 ::= Expr2 RelOp Expr3 ;

And.      Expr1 ::= Expr2 "&&" Expr1 ;

Or.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
