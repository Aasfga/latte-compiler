-- Top definitions

entrypoints Program ;

Program.                Program ::= [GlobalSymbol] ;

Function.	              GlobalSymbol ::= Type Ident "(" [Argument] ")" Block ;
Class.                  GlobalSymbol ::= "class" Ident "{" [ClassMember] "}" ;
separator nonempty GlobalSymbol "" ;

Argument. 	            Argument ::= Type Ident;
separator  Argument "," ;

AttributeDefinition.    ClassMember ::= Type Ident ";" ;
separator nonempty ClassMember "" ;

-- Statements

Block.                  Block ::= "{" [Statement] "}" ;

NoInit.                 Declaration ::= Ident ; 
Init.                   Declaration ::= Ident "=" Expr ;
separator nonempty Declaration "," ;

Empty.                  Statement ::= ";" ;
InnerBlock.             Statement ::= Block ;
Decl.                   Statement ::= Type [Declaration] ";" ;
Ass.                    Statement ::= LValue "=" Expr  ";" ;
Incr.                   Statement ::= LValue "++"  ";" ;
Decr.                   Statement ::= LValue "--"  ";" ;
Return.                 Statement ::= "return" Expr ";" ;
VoidReturn.             Statement ::= "return" ";" ;
If.                     Statement ::= "if" "(" Expr ")" Statement  ;
IfElse.                 Statement ::= "if" "(" Expr ")" Statement "else" Statement  ;
While.                  Statement ::= "while" "(" Expr ")" Statement ;
ForEach.                Statement ::= "for" "(" Type Ident ":" Expr ")" Statement ;
SExp.                   Statement ::= Expr  ";" ;
separator  Statement "" ;

-- Types

Int.                    Type ::= "int" ;
Str.                    Type ::= "string" ;
Bool.                   Type ::= "boolean" ;
Void.                   Type ::= "void" ;
Array.                  Type ::= Type "[]" ;
Object.                 Type ::= Ident ;
internal Fun.           Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

-- LValues

Variable.              LValue ::= Ident ;
ArrayAccess.           LValue ::= Expr7 "[" Expr "]" ;
Attribute.             LValue ::= Expr7 "." Ident ;

-- Expressions

LValue.                 Expr7 ::= LValue ;
LitInt.                 Expr7 ::= Integer ;
LitTrue.                Expr7 ::= "true" ;
LitFalse.               Expr7 ::= "false" ;
LitNull.                Expr7 ::= "null" ;
App.                    Expr7 ::= Ident "(" [Expr] ")" ;
String.                 Expr7 ::= String ;
Cast.                   Expr6 ::= "(" Type ")" Expr ;
NewObject.              Expr6 ::= "new" Type ;
NewArray.               Expr6 ::= "new" Type "[" Expr "]" ;
Neg.                    Expr5 ::= "-" Expr6 ;
Not.                    Expr5 ::= "!" Expr6 ;
Mul.                    Expr4 ::= Expr4 MulOp Expr5 ;
Add.                    Expr3 ::= Expr3 AddOp Expr4 ;
Rel.                    Expr2 ::= Expr2 RelOp Expr3 ;
And.                    Expr1 ::= Expr2 "&&" Expr1 ;
Or.                     Expr ::= Expr1 "||" Expr ;
coercions  Expr 7 ;
separator  Expr "," ;

-- Operators

Plus.                   AddOp ::= "+" ;
Minus.                  AddOp ::= "-" ;
Times.                  MulOp ::= "*" ;
Div.                    MulOp ::= "/" ;
Mod.                    MulOp ::= "%" ;

LTH.                    RelOp ::= "<" ;
LE.                     RelOp ::= "<=" ;
GTH.                    RelOp ::= ">" ;
GE.                     RelOp ::= ">=" ;
EQU.                    RelOp ::= "==" ;
NE.                     RelOp ::= "!=" ;

-- comments

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
