{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintLatte.
--   Generated by the BNF converter.

module Parser.PrintLatte where

import qualified Parser.AbsLatte as AbsLatte
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsLatte.Ident where
  prt _ (AbsLatte.Ident i) = doc (showString i)

instance Print (AbsLatte.Program a) where
  prt i e = case e of
    AbsLatte.Program _ functions -> prPrec i 0 (concatD [prt 0 functions])

instance Print (AbsLatte.Function a) where
  prt i e = case e of
    AbsLatte.Function _ type_ id arguments block -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 arguments, doc (showString ")"), prt 0 block])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsLatte.Function a] where
  prt = prtList

instance Print (AbsLatte.Argument a) where
  prt i e = case e of
    AbsLatte.Argument _ type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsLatte.Argument a] where
  prt = prtList

instance Print (AbsLatte.Block a) where
  prt i e = case e of
    AbsLatte.Block _ statements -> prPrec i 0 (concatD [doc (showString "{"), prt 0 statements, doc (showString "}")])

instance Print [AbsLatte.Statement a] where
  prt = prtList

instance Print (AbsLatte.Statement a) where
  prt i e = case e of
    AbsLatte.Empty _ -> prPrec i 0 (concatD [doc (showString ";")])
    AbsLatte.InnerBlock _ block -> prPrec i 0 (concatD [prt 0 block])
    AbsLatte.Decl _ type_ declarations -> prPrec i 0 (concatD [prt 0 type_, prt 0 declarations, doc (showString ";")])
    AbsLatte.Ass _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr, doc (showString ";")])
    AbsLatte.Incr _ id -> prPrec i 0 (concatD [prt 0 id, doc (showString "++"), doc (showString ";")])
    AbsLatte.Decr _ id -> prPrec i 0 (concatD [prt 0 id, doc (showString "--"), doc (showString ";")])
    AbsLatte.Return _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    AbsLatte.VoidReturn _ -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    AbsLatte.If _ expr statement -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 statement])
    AbsLatte.IfElse _ expr statement1 statement2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 statement1, doc (showString "else"), prt 0 statement2])
    AbsLatte.While _ expr statement -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 statement])
    AbsLatte.SExp _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsLatte.Declaration a) where
  prt i e = case e of
    AbsLatte.NoInit _ id -> prPrec i 0 (concatD [prt 0 id])
    AbsLatte.Init _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsLatte.Declaration a] where
  prt = prtList

instance Print (AbsLatte.Type a) where
  prt i e = case e of
    AbsLatte.Int _ -> prPrec i 0 (concatD [doc (showString "int")])
    AbsLatte.Str _ -> prPrec i 0 (concatD [doc (showString "string")])
    AbsLatte.Bool _ -> prPrec i 0 (concatD [doc (showString "boolean")])
    AbsLatte.Void _ -> prPrec i 0 (concatD [doc (showString "void")])
    AbsLatte.Fun _ type_ types -> prPrec i 0 (concatD [prt 0 type_, doc (showString "("), prt 0 types, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsLatte.Type a] where
  prt = prtList

instance Print (AbsLatte.Expr a) where
  prt i e = case e of
    AbsLatte.Var _ id -> prPrec i 6 (concatD [prt 0 id])
    AbsLatte.LitInt _ n -> prPrec i 6 (concatD [prt 0 n])
    AbsLatte.LitTrue _ -> prPrec i 6 (concatD [doc (showString "true")])
    AbsLatte.LitFalse _ -> prPrec i 6 (concatD [doc (showString "false")])
    AbsLatte.App _ id exprs -> prPrec i 6 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    AbsLatte.String _ str -> prPrec i 6 (concatD [prt 0 str])
    AbsLatte.Neg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    AbsLatte.Not _ expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    AbsLatte.Mul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    AbsLatte.Add _ expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    AbsLatte.Rel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    AbsLatte.And _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    AbsLatte.Or _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsLatte.Expr a] where
  prt = prtList

instance Print (AbsLatte.AddOp a) where
  prt i e = case e of
    AbsLatte.Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    AbsLatte.Minus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (AbsLatte.MulOp a) where
  prt i e = case e of
    AbsLatte.Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    AbsLatte.Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    AbsLatte.Mod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (AbsLatte.RelOp a) where
  prt i e = case e of
    AbsLatte.LTH _ -> prPrec i 0 (concatD [doc (showString "<")])
    AbsLatte.LE _ -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsLatte.GTH _ -> prPrec i 0 (concatD [doc (showString ">")])
    AbsLatte.GE _ -> prPrec i 0 (concatD [doc (showString ">=")])
    AbsLatte.EQU _ -> prPrec i 0 (concatD [doc (showString "==")])
    AbsLatte.NE _ -> prPrec i 0 (concatD [doc (showString "!=")])

